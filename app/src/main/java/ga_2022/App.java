/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ga_2022;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import com.opencsv.CSVWriter;

public class App {

        public static final String outputFolderPath = "C:\\Users\\henri\\Documents\\ga\\ga_2022\\app\\generated";
        public static final String csvName = "data.csv";

        public static final String hydrophobString = Examples.SEQ50;
        public static final int faltungSize = hydrophobString.length(); // Anzahl der Knoten 
        public static final int generationSize = 200;
        public static final int maxGenerationNumber = 10000;

        public static final boolean turnamentSelection = true;
        public static final boolean mutationOn = true;
        public static final boolean crossOverOn = true;
        public static final int turnamentSize = 4;

        public static int crossOverRate = 2; 
        public static int mutationRate = 10; // eg 3 = 3%
        private ArrayList<Generation> generationList;
        private int genCnt = 0;
        private Faltung maxFitness;
    public static void main(String[] args) throws Exception {
        App app = new App();
        GraphicOutput ga = new GraphicOutput();
        app.newCsvFile();
        app.generateStartingGeneration();
        for(int i = 1; i < maxGenerationNumber; i++){
            //System.out.println("avg Fitness " + app.generationList.get(app.genCnt).getAvgFitness());
            app.nextGeneration();
        }
        ga.generateImage( app.maxFitness, outputFolderPath);

        System.out.println("max Fitness: " + app.maxFitness.getFitness());
    }

    public App() {
        generationList = new ArrayList<>();
    }

    public Faltung punktMutation(Faltung f){
        int changePos = randomInBetween(1, f.size()-1); 
        int newCarNumber = randomInBetween(0, 2);
        String newChar;
        Faltung newFaltung;
        if(newCarNumber == 0){ 
            newChar = "l";
        } else if ( newCarNumber == 1){
            newChar = "g";
        } else {
            newChar = "r";
        }
        newFaltung = new Faltung(f.faltung.substring(0,changePos-1) + newChar +f.faltung.substring(changePos), hydrophobString);
        return newFaltung;
    }

    public Faltung onePointCrossover(Faltung f0, Faltung f1){
        int changePos = randomInBetween(0, f0.size()-1);
        String newFaltungString = f0.faltung.substring(0,changePos) + f1.faltung.substring(changePos);
        Faltung newFaltung = new Faltung(newFaltungString, f0.hydrophob);
        //System.out.println("changePos: " + changePos);
        //System.out.println(f0.faltung + " " + f1.faltung + " " + newFaltung.faltung);
        return newFaltung;
    }

    public void nextGeneration(){
        ArrayList<Faltung> newFaltungList = new ArrayList<>();
        if(!turnamentSelection){
            for(int i = 0; i < generationSize; i++){
                newFaltungList.add(new Faltung(fitnessProportionateSelection(generationList.get(genCnt).getFaltungList())));
            }
        } else if (turnamentSelection) {
            //System.out.println("turnament Selection");
            for(int i = 0; i < generationSize; i++){
                newFaltungList.add(new Faltung(turnamentSelection(generationList.get(genCnt).getFaltungList())));
            }
        }if(mutationOn){
            //System.out.println("lets Mutate");
            for(int i = 0; i < generationSize; i++){
                if(mutationRate >= randomInBetween(0, 100)){
                    Faltung newFaltung = punktMutation(newFaltungList.get(i));
                    newFaltungList.set(i, newFaltung );
                }
            }  
        }
        if(crossOverOn){
            for(int i = 0; i < generationSize; i++){
                if(crossOverRate >= randomInBetween(0, 100)){
                    Faltung newFaltung = onePointCrossover(
                        newFaltungList.get(randomInBetween(0, generationSize -1)), 
                        newFaltungList.get(randomInBetween(0, generationSize -1)));
                    newFaltungList.set(i, newFaltung );
                }
            }  
        }
        generationList.add(new Generation(newFaltungList));
        genCnt++;
        if(maxFitness.getFitness() < generationList.get(genCnt).getMaxFitness().getFitness()){
            maxFitness = generationList.get(genCnt).getMaxFitness();
        }
        updateCsv();
    }

    public Faltung fitnessProportionateSelection(ArrayList<Faltung> population){

        Random rng = new Random();
        Faltung selected;

        double[] cumulativeFitnesses = new double[population.size()];
        
        cumulativeFitnesses[0] = population.get(0).getFitness();
        for (int i = 1; i < population.size(); i++)
        {
            double fitness = population.get(i).getFitness();
            cumulativeFitnesses[i] = cumulativeFitnesses[i - 1] + fitness;
        }

        double randomFitness = rng.nextDouble() * cumulativeFitnesses[cumulativeFitnesses.length - 1];
        int index = Arrays.binarySearch(cumulativeFitnesses, randomFitness);
        if (index < 0)
        {
            // Convert negative insertion point to array index.
            index = Math.abs(index + 1);
            //System.out.println("index: " + index);
        }
        //System.out.println("randomFitness: " + randomFitness);
        //System.out.println("cumulativeFitnesses " + cumulativeFitnesses[population.size()-1]);
        selected = population.get(index);
        return selected;
    }

    public Faltung turnamentSelection(ArrayList<Faltung> population){
        int randomIndex = randomInBetween(0, generationSize-1);
        Faltung turnamentWinner = population.get(randomIndex);
        
        for (int i = 0 ; i < turnamentSize-1; i++){
            randomIndex = randomInBetween(0, generationSize-1);
            if(turnamentWinner.getFitness() < population.get(randomIndex).getFitness()){
                turnamentWinner = population.get(randomIndex);
            }
        }
        return turnamentWinner;
    }

    public int randomInBetween(int min, int max){
		Random random = new Random();

		int value = random.nextInt((max - min) + 1) + min;
		return value;
    }

    public void writeDataLine(String[] data){
        try {
            
            CSVWriter writer = new CSVWriter(new FileWriter(outputFolderPath + File.separator + csvName, true),
                CSVWriter.DEFAULT_SEPARATOR,
                CSVWriter.NO_QUOTE_CHARACTER,
                CSVWriter.DEFAULT_ESCAPE_CHARACTER,
                CSVWriter.RFC4180_LINE_END);

            writer.writeNext(data);
              
            writer.close();

        } catch (IOException e ) {
            e.printStackTrace();
        }
    }
    
    public void newCsvFile(){
        String[] header = {"Gen. Nr.", "avg. fitness current Gen", "max. fitness current Gen", "max. fitness all Gen", "max. Bonds best candidate", "overlap best candidate"};
        try {
            CSVWriter writer = new CSVWriter(new FileWriter(outputFolderPath + File.separator + csvName, false),
            CSVWriter.DEFAULT_SEPARATOR,
            CSVWriter.NO_QUOTE_CHARACTER,
            CSVWriter.DEFAULT_ESCAPE_CHARACTER,
            CSVWriter.RFC4180_LINE_END);
            
            writer.writeNext(header);
            writer.close();

        } catch (IOException e ) {
            e.printStackTrace();
        }
    }

    public Faltung generateRandomFaltung(){
        String newFaltungString = "";

        for(int i = 0; i < faltungSize-1 ; i++){
            int newCarNumber = randomInBetween(0, 2);
            String newChar;
            if(newCarNumber == 0){ 
                newChar = "l";
            } else if ( newCarNumber == 1){
                newChar = "g";
            } else {
                newChar = "r";
            }
            newFaltungString += newChar;
        }
        return new Faltung(newFaltungString, hydrophobString);
    }
    
    public void generateStartingGeneration(){
        ArrayList<Faltung> newFaltungList = new ArrayList<>();
        for(int i = 0; i < generationSize; i++){
            newFaltungList.add(generateRandomFaltung());
        }
        generationList.add(new Generation(newFaltungList));
        maxFitness = generationList.get(genCnt).getMaxFitness();
        updateCsv();
    }

    public void updateCsv(){
        ArrayList<String> newCsv = new ArrayList<>();
        newCsv.add(Integer.toString(genCnt));
        newCsv.add(Double.toString(generationList.get(genCnt).getAvgFitness()));
        newCsv.add(Double.toString(generationList.get(genCnt).getMaxFitness().getFitness()));
        newCsv.add(Double.toString(maxFitness.getFitness()));
        newCsv.add(Integer.toString(maxFitness.getBondSet().size()));
        newCsv.add(Integer.toString(maxFitness.getOverlapList().size()));
        
        String[] csvString = newCsv.toArray(new String[0]);
        writeDataLine(csvString);
    }
}
